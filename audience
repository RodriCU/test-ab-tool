//Device type
function detectarTipoDispositivo() {
    var userAgent = navigator.userAgent || navigator.vendor || window.opera;
    // Dispositivos móviles
    if (/android/i.test(userAgent)) {
        return "mobile";
    }
    // Dispositivos iOS
    if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {
        return "mobile";
    }
    // Tablets
    var esTablet = /iPad|Tablet|PlayBook|Nexus 7|Nexus 10|KFAPWI/.test(userAgent);
    if (esTablet) {
        return "tablet";
    }
    // Escritorio
    return "desktop";
}
var tipoDispositivo = detectarTipoDispositivo();


//Type of referent
function getReferrer() {
    // Obtener el referente
    var referrer = document.referrer;
    // Si no hay referente, se puede establecer un valor predeterminado o dejarlo vacío
    if (!referrer) {
        referrer = "direct";
    }
    return referrer;
}


//UTMs
function getUTMParameter(param) {
    var urlParams = new URLSearchParams(window.location.search);
    return urlParams.get(param) || 'sin-definir';
}
function setCookie(name, value, days) {
    var expires = "";
    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = "; expires=" + date.toUTCString();
    }
    document.cookie = name + "=" + (value || "") + expires + "; path=/";
}
// Get UTM or 'undefined' values if not present
var utmSource = getUTMParameter('utm_source');
var utmMedium = getUTMParameter('utm_medium');
var utmCampaign = getUTMParameter('utm_campaign');
// Create the _exp_utm variable
var _exp_utm = utmSource + "_" + utmMedium + "_" + utmCampaign;
// Insert the cookie in the user's browser
setCookie("_exp_utm", _exp_utm, 90); // La cookie expira en 90 días


//Type detalayer in first nesting of the object
function obtenerValorDeDataLayer(dimension) {
    // Ensure that dataLayer is defined
    if (typeof dataLayer === 'undefined') {
        console.warn('dataLayer no está definido.');
        return null;
    }
    // Traverse each object in dataLayer
    for (var i = 0; i < dataLayer.length; i++) {
        var item = dataLayer[i];
        // Check if the object has the property 'dimension'.
        if (item.hasOwnProperty(dimension)) {
            return item[dimension];
        }
    }
    // Return null if 'dimension' not found
    console.warn('Dimension "' + dimension + '" no encontrada en dataLayer.');
    return null;
}
// Example of use
var valor = obtenerValorDeDataLayer('miDimension');


//Type detalayer in second nesting of the object such as ecommerce dimensions.
function obtenerValorDeItemsEnDataLayer(dimension) {
    // Ensure that dataLayer is defined
    if (typeof dataLayer === 'undefined') {
        console.warn('dataLayer no está definido.');
        return null;
    }
    // Traverse each object in dataLayer
    for (var i = 0; i < dataLayer.length; i++) {
        var item = dataLayer[i];
        // Check if the object has the property 'ecommerce'.
        if (item.hasOwnProperty('ecommerce')) {
            var ecommerce = item.ecommerce;
            // Check if ecommerce has the property 'items'.
            if (ecommerce.hasOwnProperty('items')) {
                var items = ecommerce.items;
                // Scroll through each object in items
                for (var j = 0; j < items.length; j++) {
                    var item = items[j];
                    // Check whether the item object has PROPERTY
                    if (item.hasOwnProperty(dimension)) {
                        return item[dimension];
                    }
                }
            }
        }
    }
    // Return null if 'dimension' not found
    console.warn('Dimension "' + dimension + '" no encontrada en items de ecommerce de dataLayer.');
    return null;
}
// Example of use
var valor = obtenerValorDeItemsEnDataLayer('price');


//Type of cookie
function obtenerValorDeCookie(nombreCookie) {
    var cookies = document.cookie.split(';');
    for(var i = 0; i < cookies.length; i++) {
        var cookie = cookies[i];
        var partes = cookie.split('=');
        // Removing blanks at the beginning of the cookie name
        var nombre = partes[0].trim();
        if (nombre === nombreCookie) {
            // Decode and return the cookie value
            return decodeURIComponent(partes.slice(1).join('='));
        }
    }
    // Return null if cookie not found
    return null;
}
// Example of use
var valorCookie = obtenerValorDeCookie('miCookie');
